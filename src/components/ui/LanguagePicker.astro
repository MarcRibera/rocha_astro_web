---
import { languages } from "@utils//ui";
---
<div class="language-picker flex items-center justify-end">
  {
    // Map through the list of languages, creating a link for each language
    Object.entries(languages).map(([lang, label]) => (
      <a
        data-astro-prefetch
        class=" text-neutral-500 px-2 text-xs relative"
        href={`/${lang === "es" ? "" : lang}`}
      >
        {label}
      </a>
    ))
  }
</div>

<script>
  // Type alias for supported languages
  type TLanguage = "es" | "cat";
  // array of supported languages
  const languages: TLanguage[] = ["es", "cat"];

    document.addEventListener("DOMContentLoaded", function () {
    // get link elements
    const languageLinks = document.querySelectorAll(".language-picker a");

    // Set active current language
    let currentLang = "es";
    const url = new URL(window.location.href);

    if (url.pathname != "/") {
      const pathParts = url.pathname.replaceAll("/", "")
      currentLang = languages.includes(pathParts as TLanguage) ? pathParts : "es";
    }

    languageLinks.forEach(ele => {
        const link = ele as HTMLAnchorElement;
        let linkLang = link.getAttribute('href')?.replace("/", "")
        link.classList.remove('active');
        linkLang = linkLang || "es";
        
        if(linkLang === currentLang) {
          link.classList.add('active');
        }
      });

    // add click event listener to each language link to switch languages
    languageLinks.forEach((element) => {
      const link = element as HTMLAnchorElement;
      const lang = link
        .getAttribute("href")
        ?.replace("/", "")
        .replace("/", "") as TLanguage;

      link.addEventListener("click", function (event) {
        event.preventDefault();

        const url = new URL(window.location.href);
        const pathParts = url.pathname
          .split("/")
          .filter((part) => part && !languages.includes(part as TLanguage));

        // Disable the selection of the same language
        if (lang === url.pathname.split("/")[1]) return;

        // Determine if the current URL already has a language prefix
        const currentLang = languages.includes(pathParts[0] as TLanguage) ? pathParts[0] : "es";


        // Remove current language prefix from pathParts
        if (languages.includes(pathParts[0] as TLanguage)) {
          pathParts.shift();
        }

        // Determine if we are switching to a different language
        if (lang !== currentLang) {
          if (lang !== "es") {
            // Add the new language prefix for non-English
            pathParts.unshift(lang);
          }
        }

        url.pathname = pathParts.join("/");
        
        window.location.href = url.toString();
      });
    });
    });


</script>

<style scoped>
  .active::after {
    content: "";
    display: inline-block;
    width: 21px;
    height: 2px;
    background-color:#a3a3a3;
    position: absolute;
    bottom: -4px;
    left:9px;
  }
</style>