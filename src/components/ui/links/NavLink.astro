---
// Destructure the properties from Astro.props
const { url, name } = Astro.props;

// Define TypeScript interface for the properties
interface Props {
  url: string;
  name: string;
}
---

<!--
Re-usable link component for navigation bar. Highlights the active link
by comparing the current URL with the href of each link.
We assign an ID matching the URL for easy reference in our script.
If URL is '/' (home page), assign ID as 'home' 
-->
<a
  id={url === "/" ? "home" : url.replace("/", "")}
  href={url}
  data-astro-prefetch
  class="rounded-lg text-base font-medium text-neutral-600 outline-none ring-zinc-500 hover:text-neutral-500 focus-visible:ring dark:text-neutral-400 dark:ring-zinc-200 dark:hover:text-orange-300 dark:hover:opacity-55 dark:focus:outline-none md:py-3 md:text-sm 2xl:text-base transition duration-300"
>
  {name}
</a>

<script>
  // Hide the collapsed navigation menu when the user clicks 
    window.addEventListener('click',() => {
    const HSCollapse = window.HSCollapse
    HSCollapse.hide('.hs-collapse-toggle')
  }); 

  // Add active nav class and remove class from other nav items
  window.addEventListener('hashchange', function() {  
    setActiveNavItem();
  });

  document.addEventListener("DOMContentLoaded", function () {
    if (!window.location.hash) {
      window.location.hash = "#home";
    }
    setActiveNavItem();
  });

  function setActiveNavItem() {
    let url = window.location.hash;
    let navBar = document.getElementById("navbar-collapse-with-animation");
    if (navBar) {
      const links = navBar.querySelectorAll('a');
      links.forEach(link => {
        link.classList.remove(
          "text-orange-300", "dark:text-orange-300", "dark:hover:opacity-100"
        );
        if(link.id === url) {
          link.classList.add("text-orange-300", "dark:text-orange-300", "dark:hover:opacity-100");
        }
      });
    }
  }
</script>
