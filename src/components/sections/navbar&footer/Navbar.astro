---
//Import relevant dependencies
// import ThemeIcon from "@components/ThemeIcon.astro";
import NavLink from "@components/ui/links/NavLink.astro";
import enStrings from "@utils/navigation.ts";
// import LanguagePicker from "@components/ui/LanguagePicker.astro";
import Icon from "@/components/ui/icons/Icon.astro";
// import frStrings from "@utils/fr/navigation.ts";

// Select the correct translation based on the page's lang prop:
// const strings = Astro.currentLocale === "fr" ? frStrings : enStrings;
// const homeUrl = Astro.currentLocale === "fr" ? "/fr" : "/";

// hardcoded, no transaltions, check above code to transalte
const strings =  enStrings;
// const homeUrl =  "/";


// Global declaration for gsap animation library
declare global {
  interface Window {
    HSCollapse: any;
  }
}
---

<!-- Main header component -->
<header
  class="fixed inset-x-0 top-4 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start px-4 sm:px-6 lg:px-8"
>
  <!-- Navigation container -->
  <nav
    class="relative mx-2 w-full rounded-[8px] border border-yellow-100/40 bg-yellow-50/60 px-4 py-3 backdrop-blur-md dark:border-neutral-700/40 dark:bg-neutral-800/80 dark:backdrop-blur-md md:flex md:items-center md:justify-between md:px-6 md:py-0 lg:px-8 xl:mx-auto"
    aria-label="Global"
  >
  
    <div class="flex items-center justify-between gap-4">
      <!-- contact info -->
      <div class="flex items-center">
        <Icon name="phone" />
        <p class="whitespace-nowrap text-xs text-neutral-400 dark:text-neutral-400"><a href="tel:+34933333753">933 333 753</a> </p>
      </div>

      <div class=" hidden xs:flex items-center">
        <Icon name="email"/>
        <p class="whitespace-nowrap text-sm text-neutral-400 dark:text-neutral-400">
          <a href="mailto:fillsrocha@fillsrocha.com">fillsrocha@fillsrocha.com</a>
           </p>
      </div>

      <!-- Collapse toggle for smaller screens -->
      <div class="mr-5 md:hidden basis-full">
        <button
          type="button"
          class="hs-collapse-toggle flex items-center justify-end h-8 w-full  rounded-full text-sm font-bold text-neutral-600 transition duration-300 disabled:pointer-events-none disabled:opacity-50 dark:text-neutral-400  dark:focus:outline-none"
          data-hs-collapse="#navbar-collapse-with-animation"
          aria-controls="navbar-collapse-with-animation"
          aria-label="Toggle navigation"
        >
          <svg
            class="h-[1.25rem] w-[1.25rem] flex-shrink-0 hs-collapse-open:hidden"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="3" x2="21" y1="6" y2="6"></line>
            <line x1="3" x2="21" y1="12" y2="12"></line>
            <line x1="3" x2="21" y1="18" y2="18"></line>
          </svg>
          <svg
            class="hidden h-[1.25rem] w-[1.25rem] flex-shrink-0 hs-collapse-open:block"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </svg>
        </button>
      </div>

      <!-- ThemeIcon component specifically for smaller screens -->
      <!-- <span class="inline-block md:hidden">
        <ThemeIcon />
      </span> -->
    </div>

    <!--  Navigation links -->
    <div
      id="navbar-collapse-with-animation"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
    >
      <!-- Navigation links container -->
      <div
        class="mt-5 flex flex-col gap-x-0 gap-y-4 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-4 lg:gap-x-7 md:gap-y-0 md:ps-7 py-2"
      >
        <!-- Navigation links and Authentication component -->
        {strings.navBarLinks.map(link => (
          <NavLink url={link.url} name={link.name} />
        ))}

        <!-- <LanguagePicker /> -->
        
        <!-- ThemeIcon component specifically for larger screens -->
        <!-- <span class="hidden md:inline-block">
          <ThemeIcon />
        </span> -->
      </div>
    </div>
  </nav>
</header>
<script>
  import "@preline/collapse/index.js";
  import "@preline/overlay/index.js";

  // scroll smoothly to sections on click nav links
  document.addEventListener("DOMContentLoaded", () => {
  const navLinks: HTMLAnchorElement[] = Array.from(document.querySelectorAll("nav a"));
  interface Link extends HTMLAnchorElement {
  href: string;
}
  navLinks.forEach((link: Link) => {
    link.addEventListener("click", (event) => {
      event.preventDefault(); 

      const targetId = link.getAttribute("href")?.replace("#", "");
    
      if(targetId){
        const targetSection = document.getElementById(targetId);
        if (targetSection) {
          targetSection.scrollIntoView({
            behavior: "smooth", 
            block: "start",
          });
        }
      }
    });
  });
});

</script>


<!-- Theme Appearance script to manage light/dark modes DISABLED -->
<!-- <script is:inline>
  const HSThemeAppearance = {
    init() {
      const defaultTheme = "dark";
      let theme = localStorage.getItem("hs_theme") || defaultTheme;

      if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance(theme);
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme }),
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]",
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]",
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item,
        ),
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });

  
</script> -->
<!--Import the necessary Collapse and Overlay plugins-->
<!--https://preline.co/plugins/html/collapse.html-->
<!--https://preline.co/plugins/html/overlay.html-->

